
// task的创建
//task myTask1 {
//    println "=============================> configure task1"
//}
//
//task myTask2 {
//    println "=============================> configure task2"
//}


// task参数
//task myTask1 {
//    doLast {
//        println "=============================> doLast in task1"
//    }
//}
//
//task myTask2 {
//    doLast {
//        println "=============================> doLast in task2"
//    }
//}
//
//task myTask3 {
//    doLast {
//        println "=============================> doLast in task3, this is old task"
//    }
//}
//
//task myTask3(description: "这是task3的描述", group: "myTaskGroup", dependsOn: [myTask1, myTask2], overwrite: true) {
//    doLast {
//        println "=============================> doLast in task3, this is new task"
//    }
//}


// task type使用方法
//自定义Task类，必须继承自DefaultTask
//class SayHelloTask extends DefaultTask {
//
//    String msg = "default name"
//    int age = 18
//
//    // 构造函数必须用@javax.inject.Inject注解标识
//    @javax.inject.Inject
//    SayHelloTask(int age) {
//        this.age = age
//    }
//
//    // 通过@TaskAction注解来标识该Task要执行的动作
//    @TaskAction
//    void sayHello() {
//        println "Hello $msg ! age is ${age}"
//    }
//    
//}
//
////通过constructorArgs参数来指定构造函数的参数值
//task hello1(type: SayHelloTask, constructorArgs: [30])
//
////通过type参数指定task的父类，可以在配置代码里修改父类的属性
//task hello2(type: SayHelloTask, constructorArgs: [18]) {
//    //配置代码里修改 SayHelloTask 里的字段 msg 的值
//    msg = "hjy"
//}

// task接口解析
//class SayHelloTask extends DefaultTask {
//
//    String msg = "default name"
//    int age = 20
//
//    @TaskAction
//    void sayHello() {
//        println "=============================>  Hello $msg ! Age is ${age}"
//    }
//
//}
//
//task test1 {
//    doLast {
//        println "=============================> task test1 exec..."
//    }
//}
//task test2 {
//    doLast {
//        println "=============================> task test2 exec..."
//    }
//}
//task test3 {
//    doLast {
//        println "=============================> task test3 exec..."
//    }
//}
//task hello(type: SayHelloTask, group: "MyGroup")
//
////对task进行配置，
//hello.configure {
//    println "=============================> hello task configure"
//    msg = "hjy"
//}
//
////获取task的名称
//println "=============================> task name is ${hello.getName()}"
////获取task的组名
//println "=============================> task group is ${hello.getGroup()}"
//
////设置task里的属性值，设置 age = 70
//hello.setProperty("age", 70)
////获取task里的某个属性值
//println "=============================> task msg is ${hello.property('msg')}"
//
////设置依赖的task，只有test1 task执行完后才会执行hello task
//hello.dependsOn(test1)
////设置终结者任务，执行完hello task之后会执行test2 task，通常可以用该方法做一些清理操作
//hello.finalizedBy(test2)
//
////如果同时执行hello、test3这2个task，会确保test3执行完之后才执行hello这个task，用这个来保证执行顺序
//hello.setMustRunAfter([test3])
//
////设置满足某个条件后才执行该task
//hello.setOnlyIf {
//    //只有当 age = 70 时，才会执行task，否则不会执行
//    return hello.property("age") == 70
//}

// TaskContainer接口
//当有task创建时
//getTasks().whenTaskAdded { Task task ->
//    println "The task ${task.getName()} is added to the TaskContainer"
//}
//
////采用create(name: String)创建
//getTasks().create("task1")
//
////采用create(options: Map<String, ?>)创建
//getTasks().create([name: "task2", group: "MyGroup", description: "这是task2描述", dependsOn: ["task1"]])
//
////采用create(options: Map<String, ?>, configure: Closure)创建
//getTasks().create("task3", {
//    group "MyGroup"
//    setDependsOn(["task1", "task2"])
//    setDescription "这是task3描述"
//})
//
//
////通过名字查找指定的task
//def task3 = getTasks().findByName("task3")
//println "findByName() return task is " + task3
//
//def taskList = getTasks().withType(DefaultTask)
//def count = 0
////遍历所有的task，打印出其名字
//taskList.all { Task t ->
//    println "${count++} task name is ${t.name}"
//}



// 增量构建
//task test1 {
//    //设置inputs
//    inputs.property("name", "hjy")
//    inputs.property("age", 20)
//    //设置outputs
//    outputs.file("$buildDir/test.txt")
//
//    doLast {
//        println "exec task task1"
//    }
//}
//
//task test2 {
//    doLast {
//        println "exec task task2"
//        println "buildDir: " +  "$buildDir"
//    }
//}

// taskInputs、taskOutputs注解
class SayHelloTask extends DefaultTask {

    //定义输入
    @Input
    String username;
    @Input
    int age

    //定义输出
    @OutputDirectory
    File destDir;

    @TaskAction
    void sayHello() {
        println "Hello $username ! age is $age"
    }

}

task test(type: SayHelloTask) {
    age = 19
    username = "hjy"
    destDir = file("$buildDir/test")
}


