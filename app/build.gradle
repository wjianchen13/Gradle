apply plugin: 'com.android.application'



android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    // 默认配置,所有 productFlavors 都会继承 defaultConfig 中配置的属性
    defaultConfig {
        applicationId "com.cold.gradle"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "company", "version"

    signingConfigs {
        test1 {
            storeFile file('../jks/test1.jks')
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
        test2 {
            storeFile file('../jks/test2.jks')
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
    }

    buildTypes {
        other {
            debuggable true
            jniDebuggable true
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }

        debug {
            debuggable true
            jniDebuggable true
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            signingConfig null // 配置debug模式下的签名，在productFlavors里面配置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }

    applicationVariants.all { variant ->
        println("==============================> variant name: " + variant.flavorName)
    }
    
    productFlavors {
        c_vivo {
            dimension "company"
        }

        v_test1 {
            signingConfig signingConfigs.test1
            applicationId "com.cold.test1"
            dimension "version"
            manifestPlaceholders = [NAME : "test1"]
            buildConfigField "boolean", "LOG_DEBUG", "true" // 是否输出LOG信息
        }

        v_test2 {
            signingConfig signingConfigs.test2
            applicationId "com.cold.test2"
            dimension "version"
            manifestPlaceholders = [NAME : "test2"]
            buildConfigField "boolean", "LOG_DEBUG", "false" // 是否输出LOG信息
        }


        // 根据官方文档可以知道开发者可以通过 android.applicationVariants.all 获取到当前所有的 apk 变体，
        // 该变体的类型为 ApplicationVariant，其父类 BaseVariantOutput 中含 name 字段，该字段实际上就是
        // 当前变体的名字，那么其实只需要判断该 name 字段是否包含 release 关键字即可。
//        applicationVariants.all { variant ->
//            println("==============================> variant name: " + variant.flavorName)
//        }
    }
    
    
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
